<typedecl>     ::= type <typedeflist>
<typedeflist>  ::= <typedef> [ <typedeflist> ]
<typedef>      ::= <typeid> = <typespec> ;
<typespec>     ::= <typeid> | <arraydef>  |  <ptrdef>  |  <rangedef>  | <enumdef>  |  <recdef>
<typeid>       ::= <ident>
<arraydef>     ::= [ packed ] array <lbrack> <rangedef> <rbrack> of <typeid>
<lbrack>       ::= [
<rbrack>       ::= ]
<ptrdef>       ::= ^ <typeid>
<rangedef>     ::= <number> .. <number>
<number>       ::= <digit> [ <number> ]
<enumdef>      ::= <lparen> <idlist> <rparen>
<lparen>       ::= (
<rparen>       ::= )
<idlist>       ::= <ident> { , <ident> }
<recdef>       ::= record <vardecllist> end ;
<vardecl>     ::= var <vardecllist> ;
<vardecllist> ::= <varandtype> { ; <varandtype> }
<varandtype>  ::= <ident> { , <ident> } : <typespec>
<ident>       ::= <letter> { <idchar> }
<idchar>      ::= <letter>  |  <digit>  |  _
<letter>      ::= A | B | C | E | G | H | J | K | L | M | N | P | R | S | T | V | W | X | Y | Z
<digit>       ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
